# DLtrollex - –£–õ–¨–¢–†–ê –ö–ê–°–¢–û–ú–ò–ó–ò–†–£–ï–ú–´–ô –ß–ê–¢ –° –ó–í–û–ù–ö–ê–ú–ò (–£–õ–£–ß–®–ï–ù–ù–´–ô)
from flask import Flask, render_template_string, request, send_from_directory
from flask_socketio import SocketIO, emit
import datetime
import random
import os
import base64
import time
import json
import pickle

app = Flask(__name__)
app.config['SECRET_KEY'] = 'mydltrollex2024'
app.config['UPLOAD_FOLDER'] = 'user_avatars'
app.config['DATA_FOLDER'] = 'user_data'
socketio = SocketIO(app, cors_allowed_origins="*")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs(app.config['DATA_FOLDER'], exist_ok=True)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
users_db = {}
messages_db = {}  # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {user_id: {target_user_id: [messages]}}
user_sessions = {}
news_messages = []
user_settings = {}
favorites_db = {}
groups_db = {}
message_reactions = {}
active_calls = {}
moderation_db = {
    'banned_users': [],
    'muted_users': [],
    'deleted_messages': [],
    'moderators': []
}
unread_messages = {}  # –ù–æ–≤–æ–µ: –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è {user_id: {chat_id: count}}

# –ê–¥–º–∏–Ω
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "dltrollex123"

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
DEFAULT_AVATARS = [
    {"emoji": "üëª", "bg": "#6b21a8"}, {"emoji": "üòä", "bg": "#7e22ce"},
    {"emoji": "üòé", "bg": "#9333ea"}, {"emoji": "ü§†", "bg": "#a855f7"},
    {"emoji": "üßë", "bg": "#c084fc"}, {"emoji": "üë®", "bg": "#6b21a8"},
    {"emoji": "üë©", "bg": "#7e22ce"}, {"emoji": "ü¶ä", "bg": "#9333ea"},
    {"emoji": "üê±", "bg": "#a855f7"}, {"emoji": "üê∂", "bg": "#c084fc"}
]

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    data = {
        'users_db': users_db,
        'messages_db': messages_db,
        'news_messages': news_messages,
        'user_settings': user_settings,
        'favorites_db': favorites_db,
        'groups_db': groups_db,
        'message_reactions': message_reactions,
        'moderation_db': moderation_db,
        'unread_messages': unread_messages
    }
    try:
        with open(os.path.join(app.config['DATA_FOLDER'], 'data.pkl'), 'wb') as f:
            pickle.dump(data, f)
        print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def load_user_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    global users_db, messages_db, news_messages, user_settings, favorites_db, groups_db, message_reactions, moderation_db, unread_messages
    try:
        with open(os.path.join(app.config['DATA_FOLDER'], 'data.pkl'), 'rb') as f:
            data = pickle.load(f)
            users_db = data.get('users_db', {})
            messages_db = data.get('messages_db', {})
            news_messages = data.get('news_messages', [])
            user_settings = data.get('user_settings', {})
            favorites_db = data.get('favorites_db', {})
            groups_db = data.get('groups_db', {})
            message_reactions = data.get('message_reactions', {})
            moderation_db = data.get('moderation_db', {
                'banned_users': [],
                'muted_users': [],
                'deleted_messages': [],
                'moderators': []
            })
            unread_messages = data.get('unread_messages', {})
        print("üìÇ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except FileNotFoundError:
        print("üìÇ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_user_data()

HTML_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head>
    <title>DLtrollex</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* –í–∞—à–∏ —Å—Ç–∏–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Arial, sans-serif;
        }
        
        :root {
            --bg-color: #0f0f0f;
            --card-color: #1a1a1a;
            --accent-color: #8b5cf6;
            --text-color: #ffffff;
            --secondary-color: #2d2d2d;
            --border-color: #3d3d3d;
        }
        
        body {
            background: var(--bg-color);
            color: var(--text-color);
            height: 100vh;
            overflow: hidden;
            transition: all 0.3s ease;
        }
        
        /* ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */
    </style>
</head>
<body>
    <!-- HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π -->
    <div id="mainScreen" class="screen">
        <div class="auth-box floating">
            <div class="logo glowing-logo">üíú DLtrollex</div>
            <div class="subtitle">–§–∏–æ–ª–µ—Ç–æ–≤—ã–π —á–∞—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–µ–π</div>
            
            <button class="btn pulse" id="startChatBtn">
                <span>üöÄ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</span>
            </button>
            
            <button class="btn btn-admin" id="adminAccessBtn">
                <span>üëë –í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</span>
            </button>
        </div>
    </div>

    <!-- –≠–∫—Ä–∞–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ -->
    <div id="registerScreen" class="screen hidden">
        <div class="auth-box floating">
            <div class="logo glowing-logo">üíú DLtrollex</div>
            <div class="subtitle">–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</div>
            
            <input type="text" id="regName" class="input-field" placeholder="üíÅ –í–∞—à–µ –∏–º—è" required>
            <input type="text" id="regUsername" class="input-field" placeholder="üë§ @username (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)">
            <div class="optional">‚ú® –Æ–∑–µ—Ä–Ω–µ–π–º –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å, –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</div>
            
            <button class="btn" id="registerBtn">
                <span>üöÄ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</span>
            </button>
            
            <button class="btn" id="backToMainBtn">
                <span>‚Üê –ù–∞–∑–∞–¥</span>
            </button>
            
            <div id="registerError" class="error"></div>
            <div id="registerSuccess" class="success"></div>
        </div>
    </div>

    <!-- ... –æ—Å—Ç–∞–ª—å–Ω–∞—è HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... -->

    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <script>
        // –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø JAVASCRIPT –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
        
        let socket = null;
        let currentUser = null;

        document.addEventListener('DOMContentLoaded', function() {
            console.log("üöÄ DLtrollex –∑–∞–≥—Ä—É–∂–µ–Ω!");
            setupEventListeners();
            connectSocket();
        });

        function setupEventListeners() {
            // –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            document.getElementById('startChatBtn').addEventListener('click', showRegisterScreen);
            document.getElementById('adminAccessBtn').addEventListener('click', showAdminScreen);
            
            // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            document.getElementById('backToMainBtn').addEventListener('click', showMainScreen);
            document.getElementById('backToMainFromAdminBtn').addEventListener('click', showMainScreen);
            
            // –ö–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            document.getElementById('registerBtn').addEventListener('click', register);
            document.getElementById('adminLoginBtn').addEventListener('click', adminLogin);
        }

        function connectSocket() {
            socket = io();
            
            socket.on('connect', function() {
                console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É");
            });
            
            socket.on('registration_success', function(user) {
                console.log("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:", user);
                currentUser = user;
                localStorage.setItem('dlcurrentUser', JSON.stringify(user));
                showMainApp();
            });
            
            socket.on('registration_error', function(data) {
                document.getElementById('registerError').textContent = data.message;
                document.getElementById('registerBtn').disabled = false;
                document.getElementById('registerBtn').innerHTML = '<span>üöÄ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</span>';
            });
            
            socket.on('disconnect', function() {
                console.log("‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
            });
        }

        function showMainScreen() {
            document.getElementById('mainScreen').classList.remove('hidden');
            document.getElementById('registerScreen').classList.add('hidden');
            document.getElementById('adminScreen').classList.add('hidden');
        }

        function showRegisterScreen() {
            document.getElementById('mainScreen').classList.add('hidden');
            document.getElementById('registerScreen').classList.remove('hidden');
            document.getElementById('adminScreen').classList.add('hidden');
        }

        function showAdminScreen() {
            document.getElementById('mainScreen').classList.add('hidden');
            document.getElementById('registerScreen').classList.add('hidden');
            document.getElementById('adminScreen').classList.remove('hidden');
        }

        function showMainApp() {
            document.getElementById('mainScreen').classList.add('hidden');
            document.getElementById('registerScreen').classList.add('hidden');
            document.getElementById('adminScreen').classList.add('hidden');
            document.getElementById('mainApp').style.display = 'block';
            
            // –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            if (currentUser) {
                document.getElementById('userName').textContent = currentUser.name;
                document.getElementById('userUsername').textContent = currentUser.username;
                document.getElementById('userAvatar').textContent = 'üë§';
            }
        }

        function register() {
            const name = document.getElementById('regName').value.trim();
            const username = document.getElementById('regUsername').value.trim();
            
            if (!name) {
                document.getElementById('registerError').textContent = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è';
                return;
            }
            
            document.getElementById('registerBtn').disabled = true;
            document.getElementById('registerBtn').innerHTML = '<span>‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...</span>';
            document.getElementById('registerError').textContent = '';
            
            console.log("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:", { name, username });
            
            socket.emit('register', {
                name: name,
                username: username || undefined
            });
        }

        function adminLogin() {
            const password = document.getElementById('adminPass').value;
            
            if (password === 'dltrollex123') {
                currentUser = {
                    id: 'admin',
                    name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                    username: '@admin',
                    is_admin: true
                };
                localStorage.setItem('dlcurrentUser', JSON.stringify(currentUser));
                showMainApp();
            } else {
                document.getElementById('adminError').textContent = '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å';
            }
        }
    </script>
</body>
</html>
'''

@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)

@app.route('/user_avatars/<filename>')
def serve_avatar(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

def generate_user_id():
    return str(int(time.time() * 1000)) + str(random.randint(1000, 9999))

def generate_message_id():
    return str(int(time.time() * 1000)) + str(random.randint(1000, 9999))

@socketio.on('connect')
def handle_connect():
    print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {request.sid}")

@socketio.on('disconnect')
def handle_disconnect():
    user_id = user_sessions.get(request.sid)
    if user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω: {user_id}")
        del user_sessions[request.sid]

@socketio.on('register')
def handle_register(data):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        name = data.get('name', '').strip()
        username = data.get('username', '').strip()
        
        print(f"üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: name={name}, username={username}")
        
        if not name:
            emit('registration_error', {'message': '–í–≤–µ–¥–∏—Ç–µ –∏–º—è'})
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º user_id
        user_id = generate_user_id()
        
        # –ï—Å–ª–∏ username –Ω–µ —É–∫–∞–∑–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if not username:
            username = f"user{random.randint(10000, 99999)}"
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
            for user in users_db.values():
                if user.get('username') == username:
                    emit('registration_error', {'message': '–≠—Ç–æ—Ç —é–∑–µ—Ä–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç'})
                    return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            'id': user_id,
            'name': name,
            'username': username,
            'avatar': 'üë§',
            'avatar_bg': '#6b21a8',
            'registered_at': datetime.datetime.now().isoformat(),
            'is_banned': False,
            'is_muted': False,
            'is_moderator': False
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        users_db[user_id] = user_data
        user_sessions[request.sid] = user_id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        unread_messages[user_id] = {}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        save_user_data()
        
        print(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} (@{username})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        emit('registration_success', user_data)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ–Ω–ª–∞–π–Ω
        emit('user_online', {
            'user_id': user_id, 
            'username': name
        }, broadcast=True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        emit('registration_error', {'message': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'})

@socketio.on('send_private_message')
def handle_send_private_message(data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = user_sessions.get(request.sid)
    if not user_id:
        return
    
    text = data.get('text', '').strip()
    target_id = data.get('chat_id')
    
    if not text or not target_id:
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_id = generate_message_id()
    sender_name = users_db[user_id]['name'] if user_id in users_db else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
    
    message = {
        'id': message_id,
        'text': text,
        'sender_id': user_id,
        'sender_name': sender_name,
        'timestamp': datetime.datetime.now().isoformat(),
        'edited': False,
        'reactions': {}
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if user_id not in messages_db:
        messages_db[user_id] = {}
    if target_id not in messages_db[user_id]:
        messages_db[user_id][target_id] = []
    messages_db[user_id][target_id].append(message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω)
    if target_id != 'admin' and target_id in users_db:
        if target_id not in messages_db:
            messages_db[target_id] = {}
        if user_id not in messages_db[target_id]:
            messages_db[target_id][user_id] = []
        messages_db[target_id][user_id].append(message)
    
    save_user_data()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
    emit('private_message', {**message, 'chat_id': target_id})
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
    for sid, uid in user_sessions.items():
        if uid == target_id:
            emit('private_message', {**message, 'chat_id': user_id}, room=sid)
    
    print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –∫ {target_id}")

@socketio.on('get_all_users')
def handle_get_all_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users_list = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id, user_data in users_db.items():
        if user_id != 'admin':
            users_list.append(user_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    users_list.append({
        'id': 'admin',
        'name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'username': '@admin',
        'avatar': 'üëë',
        'avatar_bg': '#dc2626',
        'is_admin': True
    })
    
    emit('all_users', users_list)

@socketio.on('get_chat_messages')
def handle_get_chat_messages(data):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
    user_id = user_sessions.get(request.sid)
    if not user_id:
        return
    
    target_id = data.get('target_user_id')
    if not target_id:
        return
    
    messages = []
    
    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ
    if user_id in messages_db and target_id in messages_db[user_id]:
        messages = messages_db[user_id][target_id]
    
    emit('chat_messages', messages)

@socketio.on('get_news_messages')
def handle_get_news_messages():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    emit('all_news_messages', news_messages)

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print("üöÄ –ó–∞–ø—É—Å–∫ DLtrollex —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π...")
    print(f"üíú –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{port}")
    socketio.run(app, host='0.0.0.0', port=port, debug=True, allow_unsafe_werkzeug=True)
